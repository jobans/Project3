<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<!-- controller 모아둔 폴더 지정-->
	<context:component-scan base-package="com.spring.pro" />
	
	
	<!--인터셉터 객체 생성-->
	<beans:bean id="authenticationInterceptor" class="com.spring.intercptor.AuthenticationInterceptor"/>
	
	<!-- 인터셉터 설정 : 게시물 입력 수정, 삭제, myaccount 요청시-->	
	<interceptors>
		<interceptor>
			<mapping path="/userbbs/write"/>
			<mapping path="/userbbs/modify"/>
			<mapping path="/userbbs/delete"/>
			<mapping path="/usersignup/myaccount"/>
			<mapping path="/usersignup/modify"/>
			<mapping path="/usersignup/delete"/>
			<beans:ref bean="authenticationInterceptor"/>
		</interceptor>	
	</interceptors>
	
	<!-- 로그인 인터셉터 객체 생성 -->
	<beans:bean id="loginInterceptor" class="com.spring.intercptor.LoginInterceptor"/>
	
	<!-- 로그인인터셉터 설정 -->
	<interceptors>
		<interceptor>
			<mapping path="/usersignup/login"/>
			<beans:ref bean="loginInterceptor"/>
		</interceptor>	
	</interceptors>
	
	<!-- file Upload -->
    <beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!-- max upload size in bytes -->
        <beans:property name="maxUploadSize" value="20971520" /> <!-- 20MB -->
        <!-- max size of file in memory (in bytes) -->
        <beans:property name="maxInMemorySize" value="1048576" /> <!-- 1MB -->
    </beans:bean>
	
	<!-- test 하고 싶은 dao 객체들을 매번 하기 힘들어서 미리 넣어두는 것 context 추가 (dbms에가서 데이터를 가져옴)-->
	<context:component-scan base-package="com.spring.dao"></context:component-scan>
	
	<!--emial 인증 비밀번호 암호화에 사용  -->
	<context:component-scan base-package="com.spring.emailpw"></context:component-scan>
	
	<!-- service 계층 인식시키기  (실제 로직)-->
	<context:component-scan base-package="com.spring.service"></context:component-scan>	
	
	<!-- 이미지 업로드 관련 -->
	<!-- 업로드 패스 설정 --> 
	<beans:bean class="java.lang.String" id="uploadPath">
		<beans:constructor-arg value="C:\Users\SEOK\Documents\project3\.metadata\.plugins\org.eclipse.wst.server.core\tmp0\wtpwebapps\project3\resources" />
	</beans:bean>
	
	<!-- 일반 파일 업로드 경로 -->
	<resources mapping="/imgUpload/**" location="/resources/imgUpload/" />
	
	<beans:bean class="org.springframework.web.multipart.commons.CommonsMultipartResolver" >
		<beans:property name="maxUploadSize" value="10485760"/>
	</beans:bean>	
	
</beans:beans>
